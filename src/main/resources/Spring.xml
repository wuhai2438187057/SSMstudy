<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:component-scan base-package="service"></context:component-scan>


    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>
    <!-- 配置Druid数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>
    <!--配置声明式事务管理(可选)-->
    <!--配置事务管理器-->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 开启事务注解驱动
    将@Transactional标识在方法或类上，开始事务管理。-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--将sqlSessionFactor对象让IOC创建管理，不需要再手动创建，那样太麻烦了
配置用于创建SqlSessionFactory的工厂bean -->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 设置MyBatis核心配置文件的路径，从而读取（可以不设置） -->
        <property name="configLocation" value="classpath:mybatis-config.xml">
            <!--MyBatis核心配置文件的所有配置都可以在spring配置文件中通过标签代替配置
            当然也可以只使用配置文件，也可以混合使用。-->
        </property>
        <!-- 设置数据源 -->
        <property name="dataSource" ref="dataSource"></property>
        <!-- 设置类型别名所对应的包 -->
        <property name="typeAliasesPackage" value="pojo">
        </property>
        <property name="mapperLocations" value="classpath:mapper/*.xml">
        </property>
        <!-- 设置mapper映射文件的路径
        若映射文件所在路径和mapper接口所在路径一致，则不需要设置 -->
    </bean>
    <!--这个设置后，会通过配置的SqlSessionFactory对象创建出来sqlSession对象，然后再通过
    sqlSession对象创建出这个包下所有接口的代理实现，并交给IOC管理，直接省去了创建sqlSession的步
    骤和代理对象的创建和交付给IOC的步骤。
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="mapper"></property>
    </bean>
    <!-- 配置mapper接口的扫描配置,mybatis-spring提供，可以将指定包下所有的mapper接口
    创建动态代理,并将这些动态代理作为IOC容器的bean管理 -->
</beans>






